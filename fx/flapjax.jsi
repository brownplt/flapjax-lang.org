{
  
function isHtml(x) {
  return x instanceof window.HTMLElement || x instanceof window.Text ||
    x instanceof window.Document;
};

// contract constructor.  Assumes ctc1 if the value satisfies ctc1.flat.
// Otherwise, assumes ctc2.  The server and client projections perform this
// test independently, so it's possible for a malformed inner contract to
// make one projection assume ctc1 and the other assume ctc2.
var or = function(name) { return function(ctc1, ctc2) {
  return {
    flat: function(val) {
      return ctc1.flat(val) || ctc2.flat(val);
    },
    server: function(s,loc) { return function(val) {
      if (ctc1.flat(val)) {
        return ctc1.server(s,loc)(val);
      }
      else {
        return ctc2.server(s,loc)(val);
      }
    } },
    client: function(s,loc) { return function(val) {
      if (ctc1.flat(val)) {
        return ctc1.client(s,loc)(val);
      }
      else {
        return ctc2.client(s,loc)(val);
      }
    } }
  }; 
}; };

var optional = function(name) { return function(valueContract) {
  return {
    flat: function(val) {
      return val === undefined || valueContract.flat(val);
    },
    server: function(s,loc) { return function(val) {
      if (val === undefined) { return val; }
      else { return valueContract.server(s,loc)(val); }
    }; },
    client: function(s,loc) { return function(val) {
      if (val === undefined) { return val; }
      else { return valueContract.client(s,loc)(val); }
    }; }
  };
}; };

var EventStreamOf = function(name) { return function(eventValueContract) {
  return { 
    flat: function(val) {
      return val instanceof impl.EventStream;
    },
    server: function(s,loc) { return function(val) {
      if (val instanceof impl.EventStream) {
        return val.mapE(function(e) {
           return eventValueContract.server(s,loc)(e);
        });
      }
      else {
        contracts.blame(s,name,val,"not an EventStream",loc);
      }
    }; },
    client: function(s,loc) { return function(val) {
      if (val instanceof impl.EventStream) {
        return val.mapE(function(e) {
           return eventValueContract.client(s,loc)(e);
        });
      }
      else {
        return val;
      }
    }; }
  };
}; };

// Many Flapjax functions treat non-behavior values as constant behaviors.
// However, BehaviorOf only accepts instances of Behavior.
var BehaviorOf = function(name) { return function(valueContract) {
  return { 
    flat: function(val) {
      return val instanceof impl.Behavior;
    },
    server: function(s,loc) { return function(val) {
      if (val instanceof impl.Behavior) {
        return val.liftB(function(e) {
           return valueContract.server(s,loc)(e);
        });
      }
      else {
        contracts.blame(s,name,val,"not a Behavior",loc);
      }
    }; },
    client: function(s,loc) { return function(val) {
      if (val instanceof impl.Behavior) {
        return val.liftB(function(e) {
           return valueContract.client(s,loc)(e);
        });
      }
      else {
        return val;
      }
    }; }
  };
}; };

}


any = :function(x) { return true; };
anyDefined = :function(x) { return typeof x !== "undefined" };
staticAttributes = any;

anyBehavior = any; // or(any,Behavior) = any
bool = any;
object = any;
elementMaker = anyDefined ... -> html;

anyFunction = :function(x) {
    return typeof x  == "function";
};

anyArray = :function(x) {
  return x instanceof Array;
};


html = :isHtml;

htmlOrId = :function(x) {
  return isHtml(x) || document.getElementById(x) != null;
};

inputName = :function(name) {
  var inputs = document.getElementsByTagName("input");
  for (var i = 0; i < inputs.length; i++) {
    if (inputs[i].getAttribute('name') == name) { return true; }
  }
  return false;
};


location = :function(x) {
  return x == undefined || x == "before" || x == "after" || x == "leftMost" ||
         x == "rightMost" || x == "over" || x == "beginning" || x == "end";
};

positiveInt = :function(x) { return x >= 0; };

string = :function(x) { return typeof(x) == "string"; };

int = :function(x) { return typeof(x) == "number"; };

request = :function(x) {
  return x == "get " || x == "rest" || x == "post" || x == "rawPost";
};

response = :function(x) {
  return x == "json" || x == "xml" || x == "plain";
};

instance Behavior {
  changes : -> EventStream,
  delayB : or(positiveInt,BehaviorOf(positiveInt)) -> Behavior,
  blindB : or(positiveInt,BehaviorOf(positiveInt)) -> Behavior,
  calmB : or(positiveInt,BehaviorOf(positiveInt)) -> Behavior,
  valueNow : -> any,
  switchB : -> Behavior, // TODO: underspecified
  notB : -> Behavior,
  // the rest arguments may be 
  liftB : or(BehaviorOf(anyFunction),anyFunction) anyBehavior ... -> Behavior, 
  ifB : Behavior Behavior -> Behavior
};

instance EventStream {
  mapE : anyFunction -> EventStream,
  // TODO: a better contract should restrict this
  switchE : -> EventStream,
  filterE : anyFunction -> EventStream,
  ifE : EventStream EventStream -> EventStream,
  constantE : any -> EventStream,
  collectE : any anyFunction -> EventStream,
  notE : -> EventStream,
  filterRepeatsE : -> EventStream,
  snapshotE : Behavior -> EventStream,
  onceE : -> EventStream,
  skipFirstE : EventStream -> EventStream,
  delayE :  or(positiveInt,BehaviorOf(positiveInt)) -> EventStream,
  blindE :  or(positiveInt,BehaviorOf(positiveInt)) -> EventStream,
  calmE :  or(positiveInt,BehaviorOf(positiveInt)) -> EventStream,
  startsWith : any -> Behavior
};

notEventStream = :function(x) { return !(x instanceof impl.EventStream); };

constantB :: any -> Behavior;
delayB :: Behavior or(BehaviorOf(positiveInt),positiveInt) -> Behavior;
calmB :: Behavior or(BehaviorOf(positiveInt),positiveInt) -> Behavior;
blindB :: Behavior or(BehaviorOf(positiveInt),positiveInt) -> Behavior;
valueNow :: Behavior -> any;
switchB :: BehaviorOf(Behavior) -> Behavior;
andB :: Behavior ... -> Behavior;
orB :: Behavior ... -> Behavior;
notB :: Behavior -> Behavior;
liftB :: or(BehaviorOf(anyFunction),anyFunction) Behavior ... -> Behavior;
condB :: [Behavior,Behavior] ... -> Behavior;
ifB :: Behavior Behavior Behavior -> Behavior;
timerB :: or(positiveInt,BehaviorOf(positiveInt)) -> Behavior;
disableTimer :: or(Behavior,EventStream) -> any;
// just about anything can be printed to the DOM
insertDomB :: notEventStream htmlOrId location -> any;
insertDom :: html htmlOrId location -> any;
mouseTopB :: html -> Behavior;
mouseLeftB :: html -> Behavior;
mouseB :: html -> Behavior;
extractValueB :: or(htmlOrId,inputName) -> Behavior;
$B :: or(htmlOrId,inputName) -> Behavior;
extractValueE :: or(htmlOrId,inputName) -> EventStream;
// TODO: underspecified, behavior carries htmlOrId
extractEventE :: or(BehaviorOf(htmlOrId),htmlOrId) string -> EventStream;
$E :: or(BehaviorOf(htmlOrId),htmlOrId) string -> EventStream;
clicksE :: htmlOrId -> EventStream;
timerE :: Behavior -> EventStream;
extractValueOnEventE :: EventStream htmlOrId -> EventStream;
extractIdB :: string -> Behavior;
insertDomE :: EventStream htmlOrId location -> any;
insertValueE :: EventStream htmlOrId string ... -> any;
insertValueB :: Behavior htmlOrId string ... -> any;
tagRec :: [ string, ... ] (EventStream ... -> Behavior)
       -> Behavior;
getWebServiceObjectE
  :: EventStream ({ url : string,
                    request : request,
                    response : response,
                    fields : any,
                    body : optional(string),
                    asynchronous : optional(bool) })
  -> EventStream;
getForeignWebServiceObjectE
  :: { url : string
     , request : request
     , response : response
     , fields : any
     , body : optional(string)
     , asynchronous : optional(bool)
     }
  -> EventStream;
evalForeignScriptValE :: EventStreamOf({ url: string, globalArg: string })
                       -> EventStream;


oneE :: any -> EventStream;
zeroE :: -> EventStream;
mapE ::  anyFunction EventStream -> EventStream;
mergeE :: EventStream ... -> EventStream;
switchE :: EventStreamOf(EventStream) -> EventStream;
filterE :: EventStream anyFunction -> EventStream;
ifE :: EventStream EventStream -> EventStream;
recE :: (EventStream -> EventStream) -> EventStream;
constantE :: EventStream any -> EventStream;
collectE :: EventStream any anyFunction -> EventStream;
andE :: EventStream ... -> EventStream;
orE :: EventStream ... -> EventStream;
notE :: EventStream -> EventStream;
filterRepeatsE :: EventStream -> EventStream;
receiverE :: -> EventStream;
sendEvent :: any EventStream -> any;
snapshotE :: EventStream Behavior -> EventStream;
onceE :: EventStream -> EventStream;
skipFirstE :: EventStream -> EventStream;
delayE :: Behavior -> EventStream;
blindE :: Behavior -> EventStream;
calmE :: Behavior -> EventStream;
startsWith :: EventStream any -> Behavior;
changes :: Behavior -> EventStream;

getElementsByClass :: string optional(html) optional(string) -> [ html, ... ];
getObj :: htmlOrId -> html;
$ :: htmlOrId -> html;
readCookie :: string -> optional(string); // may return undefined
swapDom :: htmlOrId htmlOrId -> any;
getURLParam :: string -> optional(string); // may return undefined
cumulativeOffset :: html -> { left: int, top: int };

// Flapjax's map works over arbitrarily many arrays.
map :: anyFunction anyArray ... -> anyArray;

// Element constructors

A :: elementMaker;
B :: elementMaker;
BLOCKQUOTE :: elementMaker;
BR :: elementMaker;
BUTTON :: elementMaker;
CANVAS :: elementMaker;
DIV :: elementMaker;
FIELDSET :: elementMaker;
FORM :: elementMaker;
FONT :: elementMaker;
H1 :: elementMaker;
H2 :: elementMaker;
H3 :: elementMaker;
H4 :: elementMaker;
HR :: elementMaker;
IMG :: elementMaker;
IFRAME :: elementMaker;
INPUT :: elementMaker;
LABEL :: elementMaker;
LEGEND :: elementMaker;
LI :: elementMaker;
OL :: elementMaker;
OPTGROUP :: elementMaker;
OPTION :: elementMaker;
P :: elementMaker;
PRE :: elementMaker;
SELECT :: elementMaker;
SPAN :: elementMaker;
STRONG :: elementMaker;
TABLE :: elementMaker;
TBODY :: elementMaker;
TD :: elementMaker;
TEXTAREA :: elementMaker;
TFOOT :: elementMaker;
TH :: elementMaker;
THEAD :: elementMaker;
TR :: elementMaker;
TT :: elementMaker;
UL ::elementMaker;
TEXT :: elementMaker;

fold :: any;
foldR :: any;
map :: any;
filter :: any;
member :: any;
slice :: any;
forEach :: any;

toJSONString :: any -> optional(string);

compilerInsertDomB :: any;
compilerInsertValueB :: any;
compilerLift :: any;
compilerCall :: any;
compilerIf :: any;
compilerUnbehavior :: any;
compilerEventStreamArg :: any;
